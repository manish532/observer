
1=> first you have to run this command in your project in this
     command  you will include your model name & observername =>
---------------------------------------------------------------------------------------------------

php artisan make:observer companyObserver --model=RegisteredCompany



2=> After run this command you will get a observer folder below the model inside the app folder.

3=> Open observer folder and config your (companyObserver) or whatever observer you created.
   
    step 1 => implement model name like this example -
              --------------------------------------------------------------------------------------
              
              use App\Models\RegisteredCompany;

              public function created(RegisteredCompany $RegisteredCompany)
             {
                $RegisteredCompany->company_id = "IOTLAB-".$RegisteredCompany->id;
                $RegisteredCompany->save();
             }
            
   
4=>Open EventServiceProvider folder inside the Providers and implement model and obser name.ex-

----------------------------------------------------------------------------------------------------

step 1=>
---------------------------------

use App\Models\RegisteredCompany;

use App\Observers\companyobserver;


step 2 =>
---------------------------------

   public function boot()
    {
        RegisteredCompany::observe(companyobserver::class);
    }
------------------------------------------------------------------------------------------------------


 observer page example=>

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

<?php

namespace App\Observers;

use App\Models\RegisteredCompany;

class companyobserver
{
    /**
     * Handle the RegisteredCompany "created" event.
     *
     * @param  \App\Models\RegisteredCompany  $RegisteredCompany
     * @return void
     */
    public function created(RegisteredCompany $RegisteredCompany)
    {
        $RegisteredCompany->company_id = "IOTLAB-".$RegisteredCompany->id;
        $RegisteredCompany->save();
    }

    /**
     * Handle the RegisteredCompany "updated" event.
     *
     * @param  \App\Models\RegisteredCompany  $RegisteredCompany
     * @return void
     */
    public function updated(RegisteredCompany $RegisteredCompany)
    {
        //
    }

    /**
     * Handle the RegisteredCompany "deleted" event.
     *
     * @param  \App\Models\RegisteredCompany  $RegisteredCompany
     * @return void
     */
    public function deleted(RegisteredCompany $RegisteredCompany)
    {
       
    }

    /**
     * Handle the RegisteredCompany "restored" event.
     *
     * @param  \App\Models\RegisteredCompany  $RegisteredCompany
     * @return void
     */
    public function restored(RegisteredCompany $RegisteredCompany)
    {
        //
    }

    /**
     * Handle the RegisteredCompany "force deleted" event.
     *
     * @param  \App\Models\RegisteredCompany  $RegisteredCompany
     * @return void
     */
    public function forceDeleted(RegisteredCompany $RegisteredCompany)
    {
        //
    }
}
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------



   => EventServiceProvider page example=>

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;
use App\Models\RegisteredCompany;

use App\Observers\companyobserver;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     *
     * @return void
     */
    public function boot()
    {
        RegisteredCompany::observe(companyobserver::class);
    }
}

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
